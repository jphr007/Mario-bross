#include <ftxui/dom/elements.hpp>
#include <ftxui/screen/screen.hpp>
#include <ftxui/screen/color.hpp>
#include <ftxui/screen/terminal.hpp>
#include <iostream>
#include <thread>

using namespace std;
using namespace ftxui;

int main(int argc, char const *argv[]) {
  std::string reset_position;
  int frame = 0;

  auto ColorSupport = vbox({
      Terminal::ColorSupport() >= Terminal::Color::Palette16
          ? text(" 16 color palette support : Yes")
          : text(" 16 color palette support : No"),
      Terminal::ColorSupport() >= Terminal::Color::Palette256
          ? text("256 color palette support : Yes")
          : text("256 color palette support : No"),
      Terminal::ColorSupport() >= Terminal::Color::TrueColor
          ? text("       True color support : Yes")
          : text("       True color support : No"),
  });

  while (true) {
    // Crear un nuevo canvas en cada iteración para "limpiar" la pantalla
    auto can = Canvas(50, 50);

    // Calcular la posición X del auto (se mueve en bucle)
    int x_position = (frame % 50);

    // Dibujar un auto sencillo
    // Cuerpo del auto
    can.DrawPointLine(x_position, 30, x_position + 12, 30);  // Parte superior del auto
    can.DrawPointLine(x_position + 2, 29, x_position + 10, 29); // Techo del auto
    can.DrawPointLine(x_position, 31, x_position + 12, 31); // Parte inferior del auto

    // Ruedas del auto
    can.DrawPointCircle(x_position + 2, 32, 1);  // Rueda delantera
    can.DrawPointCircle(x_position + 10, 32, 1); // Rueda trasera

    // Crear pantalla y renderizar
    Screen pantalla = Screen::Create(Dimension::Full(), Dimension::Full());
    Element lienzo = bgcolor(Color::DarkViolet, border(vbox(ColorSupport, canvas(&can))));
    Render(pantalla, lienzo);
    std::cout << reset_position;
    pantalla.Print();
    reset_position = pantalla.ResetPosition(true);

    // Animar cada 0.1 segundos
    this_thread::sleep_for(0.1s);
    frame++;
  }

  return 0;
}
